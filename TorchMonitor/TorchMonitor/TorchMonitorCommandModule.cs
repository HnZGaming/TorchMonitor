using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Torch.Commands;
using Torch.Commands.Permissions;
using Utils.Torch;
using VRage.Game.ModAPI;
using VRageMath;

namespace TorchMonitor
{
    [Category("tm")]
    public sealed class TorchMonitorCommandModule : CommandModule
    {
        static readonly GpsCleanerCollection _gpsCleanerCollection;

        static TorchMonitorCommandModule()
        {
            _gpsCleanerCollection = new GpsCleanerCollection();
        }

        TorchMonitorPlugin Plugin => (TorchMonitorPlugin)Context.Plugin;

        public static IEnumerable<CommandAttribute> GetAllCommands()
        {
            return CommandModuleUtils.GetCommandMethods(typeof(TorchMonitorCommandModule)).Select(p => p.Command);
        }

        [Command("on", "Starts monitoring")]
        [Permission(MyPromoteLevel.Admin)]
        public void StartMonitoring()
        {
            TorchMonitorConfig.Instance.Enabled = true;
            Context.Respond("success");
        }

        [Command("off", "Stops monitoring")]
        [Permission(MyPromoteLevel.Admin)]
        public void StopMonitoring()
        {
            TorchMonitorConfig.Instance.Enabled = false;
            Context.Respond("success");
        }

        [Command("reload", "Reload configs")]
        [Permission(MyPromoteLevel.Admin)]
        public void ReloadConfigs()
        {
            Plugin.ReloadConfig();
            Context.Respond("success");
        }

        [Command("features", "List features")]
        [Permission(MyPromoteLevel.Admin)]
        public void ShowFeatures()
        {
            var sb = new StringBuilder();
            var features = Plugin.GetFeatures();
            foreach (var (name, enabled) in features)
            {
                sb.AppendLine($"> {name}: {(enabled ? "enabled" : "disabled")}");
            }

            Context.Respond($"Features:\n{sb}");
        }

        [Command("enable", "Enable specific feature")]
        [Permission(MyPromoteLevel.Admin)]
        public void EnableFeature(string name)
        {
            Plugin.SetFeatureEnabled(name, true);
            Context.Respond("success");
        }

        [Command("disable", "Disable specific feature")]
        [Permission(MyPromoteLevel.Admin)]
        public void DisableFeature(string name)
        {
            Plugin.SetFeatureEnabled(name, false);
            Context.Respond("success");
        }

        [Command("nexus", "Shows Nexus help")]
        [Permission(MyPromoteLevel.Admin)]
        public void ShowNexusHelp()
        {
            var msg = new StringBuilder();
            msg.AppendLine("!tm nexus corners -- shows 8 corners of the monitored nexus sector");
            msg.AppendLine("!tm nexus centers -- shows the center position of all monitored segments");
            Context.Respond(msg.ToString());
        }

        [Command("nexus corners", "Shows 8 corners of the monitored nexus sector")]
        [Permission(MyPromoteLevel.Admin)]
        public void ShowNexusSectorCorners()
        {
            var adminId = GetCallerPlayer().IdentityId;
            _gpsCleanerCollection.Clear(adminId);

            var corners = Plugin.Nexus.GetCorners();
            for (var i = 0; i < corners.Count; i++)
            {
                var corner = corners[i];
                var name = $"!tm nexus corners {i}";
                _gpsCleanerCollection.Add(adminId, name, "", corner, Color.Magenta);
            }
        }

        [Command("nexus centers", "Shows the center of all monitored nexus segments")]
        [Permission(MyPromoteLevel.Admin)]
        public void ShowNexusSegmentCenters()
        {
            var adminId = GetCallerPlayer().IdentityId;
            _gpsCleanerCollection.Clear(adminId);

            foreach (var (index, center) in Plugin.Nexus.GetCenters())
            {
                var name = $"!tm nexus centers {index.X}_{index.Y}_{index.Z}";
                _gpsCleanerCollection.Add(adminId, name, "", center, Color.Magenta);
            }
        }

        [Command("nexus cleargps", "Clears all gps generated by nexus commands")]
        [Permission(MyPromoteLevel.Admin)]
        public void DeleteNexusGps()
        {
            var adminId = GetCallerPlayer().IdentityId;
            _gpsCleanerCollection.Clear(adminId);
        }

        IMyPlayer GetCallerPlayer()
        {
            if (Context.Player is not { } admin)
            {
                throw new InvalidOperationException("must be called in game");
            }

            return admin;
        }
    }
}